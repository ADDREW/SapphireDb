{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Realtime database \u00b6 Overview \u00b6 Realtime database is a provider for Asp.Net Core and Entity Framework. It enables realtime transport of data using websockets. By subscribing to specific collections the clients can get notified about changes in the database. This enables easy data synchronization. Easy configuration Realtime database comes with all you need preconfigured. Only a few steps to make your app realtime capable. Just install and play around. No need to write REST-interfaces Realtime database comes with all necessary methods for a collection. You can query, create, update and delete things without writing a single line of code on your server. Realtime database also comes with server side prefilters to only query the data your client needs Communication over websockets Realtime database communicates over websockets. Not only is websocket a modern web technology. It also performs very well and reduces data because things like headers cookies etc. only have to get transfered once. Validation Realtime database is also able to validate your models send to the server. You can check the validity using Annotations. Authentication and authorization integrated Realtime database comes with a JWT provider and comes with functionality for authenticating and authorizing the clients. Extends existing code The library is build on top of entity framework. If you already have a database context with models etc. you do not have change anything. All actions on the context anywhere else in your project will also synchronized with the clients. Quick start \u00b6 Server Install RealtimeDatabase package PM > Install-Package RealtimeDatabase Register the services services . AddRealtimeDatabase < MyDbContext >(); services . AddDbContext < MyDbContext >( cfg => ...); Configure Request pipeline app . UseRealtimeDatabase (); Client Install package npm install ng-realtime-database -S Import realtime database module imports : [ BrowserModule , ..., RealtimeDatabaseModule , ] Query a collection constructor(private db: RealtimeDatabase) { } ngOnInit() { this.db.collection('example').values().subscribe(console.log); } Author \u00b6 Morris Janatzek ( morrisjdev )","title":"Home"},{"location":"#realtime-database","text":"","title":"Realtime database"},{"location":"#overview","text":"Realtime database is a provider for Asp.Net Core and Entity Framework. It enables realtime transport of data using websockets. By subscribing to specific collections the clients can get notified about changes in the database. This enables easy data synchronization. Easy configuration Realtime database comes with all you need preconfigured. Only a few steps to make your app realtime capable. Just install and play around. No need to write REST-interfaces Realtime database comes with all necessary methods for a collection. You can query, create, update and delete things without writing a single line of code on your server. Realtime database also comes with server side prefilters to only query the data your client needs Communication over websockets Realtime database communicates over websockets. Not only is websocket a modern web technology. It also performs very well and reduces data because things like headers cookies etc. only have to get transfered once. Validation Realtime database is also able to validate your models send to the server. You can check the validity using Annotations. Authentication and authorization integrated Realtime database comes with a JWT provider and comes with functionality for authenticating and authorizing the clients. Extends existing code The library is build on top of entity framework. If you already have a database context with models etc. you do not have change anything. All actions on the context anywhere else in your project will also synchronized with the clients.","title":"Overview"},{"location":"#quick-start","text":"Server Install RealtimeDatabase package PM > Install-Package RealtimeDatabase Register the services services . AddRealtimeDatabase < MyDbContext >(); services . AddDbContext < MyDbContext >( cfg => ...); Configure Request pipeline app . UseRealtimeDatabase (); Client Install package npm install ng-realtime-database -S Import realtime database module imports : [ BrowserModule , ..., RealtimeDatabaseModule , ] Query a collection constructor(private db: RealtimeDatabase) { } ngOnInit() { this.db.collection('example').values().subscribe(console.log); }","title":"Quick start"},{"location":"#author","text":"Morris Janatzek ( morrisjdev )","title":"Author"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2018 Morris Janatzek Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2018 Morris Janatzek Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"release-notes/","text":"Release notes \u00b6 Changelog \u00b6 1.0.2 _December 8, 2018 \u00b6 Added messaging features Added actions Added threading 1.0.0 _October 3, 2018 \u00b6 First release Basic realtime functionality Authentication using token Authorization using Attributes","title":"Release notes"},{"location":"release-notes/#release-notes","text":"","title":"Release notes"},{"location":"release-notes/#changelog","text":"","title":"Changelog"},{"location":"release-notes/#102-_december-8-2018","text":"Added messaging features Added actions Added threading","title":"1.0.2 _December 8, 2018"},{"location":"release-notes/#100-_october-3-2018","text":"First release Basic realtime functionality Authentication using token Authorization using Attributes","title":"1.0.0 _October 3, 2018"},{"location":"client/installation/","text":"Installation on client \u00b6","title":"Installation on client"},{"location":"client/installation/#installation-on-client","text":"","title":"Installation on client"},{"location":"server/installation/","text":"Installation on server \u00b6 Install package \u00b6 To use the realtime database on server side your first need to install the nuget package. In an Asp.Net Core project execute: PM > Install-Package RealtimeDatabase https://www.nuget.org/packages/RealtimeDatabase/ Create/Configure DbContext \u00b6 Create a new db context or use an existing and change the base class from DbContext to RealtimeDbContext // Change DbContext to RealtimeDbContext public class MyDbContext : RealtimeDbContext { //Add RealtimeDatabaseNotifier for DI public RealtimeContext ( DbContextOptions < RealtimeContext > options , RealtimeDatabaseNotifier notifier ) : base ( options , notifier ) { } public DbSet < User > Users { get ; set ; } public DbSet < Test > Tests { get ; set ; } ... } Register the realtime database service \u00b6 In the service configuration (normally in Startup.cs) add your RealtimeDbContext and also RealtimeDatabase public void ConfigureServices ( IServiceCollection services ) { ... // Register services services . AddRealtimeDatabase < MyDbContext >(); services . AddDbContext < MyDbContext >( cfg => ...)); ... } Configure Request Pipeline \u00b6 Add RealtimeDatabase in your pipeline configuration public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... //Add Middleware app . UseRealtimeDatabase (); } Call authentication before When using Authentication make sure to call it before UseRealtimeDatabase","title":"Installation on server"},{"location":"server/installation/#installation-on-server","text":"","title":"Installation on server"},{"location":"server/installation/#install-package","text":"To use the realtime database on server side your first need to install the nuget package. In an Asp.Net Core project execute: PM > Install-Package RealtimeDatabase https://www.nuget.org/packages/RealtimeDatabase/","title":"Install package"},{"location":"server/installation/#createconfigure-dbcontext","text":"Create a new db context or use an existing and change the base class from DbContext to RealtimeDbContext // Change DbContext to RealtimeDbContext public class MyDbContext : RealtimeDbContext { //Add RealtimeDatabaseNotifier for DI public RealtimeContext ( DbContextOptions < RealtimeContext > options , RealtimeDatabaseNotifier notifier ) : base ( options , notifier ) { } public DbSet < User > Users { get ; set ; } public DbSet < Test > Tests { get ; set ; } ... }","title":"Create/Configure DbContext"},{"location":"server/installation/#register-the-realtime-database-service","text":"In the service configuration (normally in Startup.cs) add your RealtimeDbContext and also RealtimeDatabase public void ConfigureServices ( IServiceCollection services ) { ... // Register services services . AddRealtimeDatabase < MyDbContext >(); services . AddDbContext < MyDbContext >( cfg => ...)); ... }","title":"Register the realtime database service"},{"location":"server/installation/#configure-request-pipeline","text":"Add RealtimeDatabase in your pipeline configuration public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... //Add Middleware app . UseRealtimeDatabase (); } Call authentication before When using Authentication make sure to call it before UseRealtimeDatabase","title":"Configure Request Pipeline"}]}